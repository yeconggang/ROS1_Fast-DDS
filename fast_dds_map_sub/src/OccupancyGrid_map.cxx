// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file OccupancyGrid_map.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "OccupancyGrid_map.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define OccupancyGrid_map_max_cdr_typesize 144ULL;
#define OccupancyGrid_map_max_key_cdr_typesize 0ULL;

OccupancyGrid_map::OccupancyGrid_map()
{
    // float m_resolution
    m_resolution = 0.0;
    // unsigned long m_width
    m_width = 0;
    // unsigned long m_height
    m_height = 0;
    // float m_position_x
    m_position_x = 0.0;
    // float m_position_y
    m_position_y = 0.0;
    // float m_position_z
    m_position_z = 0.0;
    // float m_orientation_x
    m_orientation_x = 0.0;
    // float m_orientation_y
    m_orientation_y = 0.0;
    // float m_orientation_z
    m_orientation_z = 0.0;
    // float m_orientation_w
    m_orientation_w = 0.0;
    // sequence<int8> m_data


}

OccupancyGrid_map::~OccupancyGrid_map()
{











}

OccupancyGrid_map::OccupancyGrid_map(
        const OccupancyGrid_map& x)
{
    m_resolution = x.m_resolution;
    m_width = x.m_width;
    m_height = x.m_height;
    m_position_x = x.m_position_x;
    m_position_y = x.m_position_y;
    m_position_z = x.m_position_z;
    m_orientation_x = x.m_orientation_x;
    m_orientation_y = x.m_orientation_y;
    m_orientation_z = x.m_orientation_z;
    m_orientation_w = x.m_orientation_w;
    m_data = x.m_data;
}

OccupancyGrid_map::OccupancyGrid_map(
        OccupancyGrid_map&& x) noexcept 
{
    m_resolution = x.m_resolution;
    m_width = x.m_width;
    m_height = x.m_height;
    m_position_x = x.m_position_x;
    m_position_y = x.m_position_y;
    m_position_z = x.m_position_z;
    m_orientation_x = x.m_orientation_x;
    m_orientation_y = x.m_orientation_y;
    m_orientation_z = x.m_orientation_z;
    m_orientation_w = x.m_orientation_w;
    m_data = std::move(x.m_data);
}

OccupancyGrid_map& OccupancyGrid_map::operator =(
        const OccupancyGrid_map& x)
{

    m_resolution = x.m_resolution;
    m_width = x.m_width;
    m_height = x.m_height;
    m_position_x = x.m_position_x;
    m_position_y = x.m_position_y;
    m_position_z = x.m_position_z;
    m_orientation_x = x.m_orientation_x;
    m_orientation_y = x.m_orientation_y;
    m_orientation_z = x.m_orientation_z;
    m_orientation_w = x.m_orientation_w;
    m_data = x.m_data;

    return *this;
}

OccupancyGrid_map& OccupancyGrid_map::operator =(
        OccupancyGrid_map&& x) noexcept
{

    m_resolution = x.m_resolution;
    m_width = x.m_width;
    m_height = x.m_height;
    m_position_x = x.m_position_x;
    m_position_y = x.m_position_y;
    m_position_z = x.m_position_z;
    m_orientation_x = x.m_orientation_x;
    m_orientation_y = x.m_orientation_y;
    m_orientation_z = x.m_orientation_z;
    m_orientation_w = x.m_orientation_w;
    m_data = std::move(x.m_data);

    return *this;
}

bool OccupancyGrid_map::operator ==(
        const OccupancyGrid_map& x) const
{

    return (m_resolution == x.m_resolution && m_width == x.m_width && m_height == x.m_height && m_position_x == x.m_position_x && m_position_y == x.m_position_y && m_position_z == x.m_position_z && m_orientation_x == x.m_orientation_x && m_orientation_y == x.m_orientation_y && m_orientation_z == x.m_orientation_z && m_orientation_w == x.m_orientation_w && m_data == x.m_data);
}

bool OccupancyGrid_map::operator !=(
        const OccupancyGrid_map& x) const
{
    return !(*this == x);
}

size_t OccupancyGrid_map::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return OccupancyGrid_map_max_cdr_typesize;
}

size_t OccupancyGrid_map::getCdrSerializedSize(
        const OccupancyGrid_map& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }




    return current_alignment - initial_alignment;
}

void OccupancyGrid_map::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_resolution;
    scdr << m_width;
    scdr << m_height;
    scdr << m_position_x;
    scdr << m_position_y;
    scdr << m_position_z;
    scdr << m_orientation_x;
    scdr << m_orientation_y;
    scdr << m_orientation_z;
    scdr << m_orientation_w;
    scdr << m_data;

}

void OccupancyGrid_map::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_resolution;
    dcdr >> m_width;
    dcdr >> m_height;
    dcdr >> m_position_x;
    dcdr >> m_position_y;
    dcdr >> m_position_z;
    dcdr >> m_orientation_x;
    dcdr >> m_orientation_y;
    dcdr >> m_orientation_z;
    dcdr >> m_orientation_w;
    dcdr >> m_data;
}

/*!
 * @brief This function sets a value in member resolution
 * @param _resolution New value for member resolution
 */
void OccupancyGrid_map::resolution(
        float _resolution)
{
    m_resolution = _resolution;
}

/*!
 * @brief This function returns the value of member resolution
 * @return Value of member resolution
 */
float OccupancyGrid_map::resolution() const
{
    return m_resolution;
}

/*!
 * @brief This function returns a reference to member resolution
 * @return Reference to member resolution
 */
float& OccupancyGrid_map::resolution()
{
    return m_resolution;
}

/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void OccupancyGrid_map::width(
        uint32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint32_t OccupancyGrid_map::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint32_t& OccupancyGrid_map::width()
{
    return m_width;
}

/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void OccupancyGrid_map::height(
        uint32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint32_t OccupancyGrid_map::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint32_t& OccupancyGrid_map::height()
{
    return m_height;
}

/*!
 * @brief This function sets a value in member position_x
 * @param _position_x New value for member position_x
 */
void OccupancyGrid_map::position_x(
        float _position_x)
{
    m_position_x = _position_x;
}

/*!
 * @brief This function returns the value of member position_x
 * @return Value of member position_x
 */
float OccupancyGrid_map::position_x() const
{
    return m_position_x;
}

/*!
 * @brief This function returns a reference to member position_x
 * @return Reference to member position_x
 */
float& OccupancyGrid_map::position_x()
{
    return m_position_x;
}

/*!
 * @brief This function sets a value in member position_y
 * @param _position_y New value for member position_y
 */
void OccupancyGrid_map::position_y(
        float _position_y)
{
    m_position_y = _position_y;
}

/*!
 * @brief This function returns the value of member position_y
 * @return Value of member position_y
 */
float OccupancyGrid_map::position_y() const
{
    return m_position_y;
}

/*!
 * @brief This function returns a reference to member position_y
 * @return Reference to member position_y
 */
float& OccupancyGrid_map::position_y()
{
    return m_position_y;
}

/*!
 * @brief This function sets a value in member position_z
 * @param _position_z New value for member position_z
 */
void OccupancyGrid_map::position_z(
        float _position_z)
{
    m_position_z = _position_z;
}

/*!
 * @brief This function returns the value of member position_z
 * @return Value of member position_z
 */
float OccupancyGrid_map::position_z() const
{
    return m_position_z;
}

/*!
 * @brief This function returns a reference to member position_z
 * @return Reference to member position_z
 */
float& OccupancyGrid_map::position_z()
{
    return m_position_z;
}

/*!
 * @brief This function sets a value in member orientation_x
 * @param _orientation_x New value for member orientation_x
 */
void OccupancyGrid_map::orientation_x(
        float _orientation_x)
{
    m_orientation_x = _orientation_x;
}

/*!
 * @brief This function returns the value of member orientation_x
 * @return Value of member orientation_x
 */
float OccupancyGrid_map::orientation_x() const
{
    return m_orientation_x;
}

/*!
 * @brief This function returns a reference to member orientation_x
 * @return Reference to member orientation_x
 */
float& OccupancyGrid_map::orientation_x()
{
    return m_orientation_x;
}

/*!
 * @brief This function sets a value in member orientation_y
 * @param _orientation_y New value for member orientation_y
 */
void OccupancyGrid_map::orientation_y(
        float _orientation_y)
{
    m_orientation_y = _orientation_y;
}

/*!
 * @brief This function returns the value of member orientation_y
 * @return Value of member orientation_y
 */
float OccupancyGrid_map::orientation_y() const
{
    return m_orientation_y;
}

/*!
 * @brief This function returns a reference to member orientation_y
 * @return Reference to member orientation_y
 */
float& OccupancyGrid_map::orientation_y()
{
    return m_orientation_y;
}

/*!
 * @brief This function sets a value in member orientation_z
 * @param _orientation_z New value for member orientation_z
 */
void OccupancyGrid_map::orientation_z(
        float _orientation_z)
{
    m_orientation_z = _orientation_z;
}

/*!
 * @brief This function returns the value of member orientation_z
 * @return Value of member orientation_z
 */
float OccupancyGrid_map::orientation_z() const
{
    return m_orientation_z;
}

/*!
 * @brief This function returns a reference to member orientation_z
 * @return Reference to member orientation_z
 */
float& OccupancyGrid_map::orientation_z()
{
    return m_orientation_z;
}

/*!
 * @brief This function sets a value in member orientation_w
 * @param _orientation_w New value for member orientation_w
 */
void OccupancyGrid_map::orientation_w(
        float _orientation_w)
{
    m_orientation_w = _orientation_w;
}

/*!
 * @brief This function returns the value of member orientation_w
 * @return Value of member orientation_w
 */
float OccupancyGrid_map::orientation_w() const
{
    return m_orientation_w;
}

/*!
 * @brief This function returns a reference to member orientation_w
 * @return Reference to member orientation_w
 */
float& OccupancyGrid_map::orientation_w()
{
    return m_orientation_w;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void OccupancyGrid_map::data(
        const std::vector<int8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void OccupancyGrid_map::data(
        std::vector<int8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<int8_t>& OccupancyGrid_map::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<int8_t>& OccupancyGrid_map::data()
{
    return m_data;
}


size_t OccupancyGrid_map::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return OccupancyGrid_map_max_key_cdr_typesize;
}

bool OccupancyGrid_map::isKeyDefined()
{
    return false;
}

void OccupancyGrid_map::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}
