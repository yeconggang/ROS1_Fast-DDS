// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file OccupancyGrid_map.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_OCCUPANCYGRID_MAP_H_
#define _FAST_DDS_GENERATED_OCCUPANCYGRID_MAP_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(OccupancyGrid_map_SOURCE)
#define OccupancyGrid_map_DllAPI __declspec( dllexport )
#else
#define OccupancyGrid_map_DllAPI __declspec( dllimport )
#endif // OccupancyGrid_map_SOURCE
#else
#define OccupancyGrid_map_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define OccupancyGrid_map_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure OccupancyGrid_map defined by the user in the IDL file.
 * @ingroup OCCUPANCYGRID_MAP
 */
class OccupancyGrid_map
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OccupancyGrid_map();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OccupancyGrid_map();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OccupancyGrid_map that will be copied.
     */
    eProsima_user_DllExport OccupancyGrid_map(
            const OccupancyGrid_map& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OccupancyGrid_map that will be copied.
     */
    eProsima_user_DllExport OccupancyGrid_map(
            OccupancyGrid_map&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OccupancyGrid_map that will be copied.
     */
    eProsima_user_DllExport OccupancyGrid_map& operator =(
            const OccupancyGrid_map& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OccupancyGrid_map that will be copied.
     */
    eProsima_user_DllExport OccupancyGrid_map& operator =(
            OccupancyGrid_map&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x OccupancyGrid_map object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OccupancyGrid_map& x) const;

    /*!
     * @brief Comparison operator.
     * @param x OccupancyGrid_map object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OccupancyGrid_map& x) const;

    /*!
     * @brief This function sets a value in member resolution
     * @param _resolution New value for member resolution
     */
    eProsima_user_DllExport void resolution(
            float _resolution);

    /*!
     * @brief This function returns the value of member resolution
     * @return Value of member resolution
     */
    eProsima_user_DllExport float resolution() const;

    /*!
     * @brief This function returns a reference to member resolution
     * @return Reference to member resolution
     */
    eProsima_user_DllExport float& resolution();

    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(
            uint32_t _width);

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport uint32_t width() const;

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport uint32_t& width();

    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(
            uint32_t _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport uint32_t height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport uint32_t& height();

    /*!
     * @brief This function sets a value in member position_x
     * @param _position_x New value for member position_x
     */
    eProsima_user_DllExport void position_x(
            float _position_x);

    /*!
     * @brief This function returns the value of member position_x
     * @return Value of member position_x
     */
    eProsima_user_DllExport float position_x() const;

    /*!
     * @brief This function returns a reference to member position_x
     * @return Reference to member position_x
     */
    eProsima_user_DllExport float& position_x();

    /*!
     * @brief This function sets a value in member position_y
     * @param _position_y New value for member position_y
     */
    eProsima_user_DllExport void position_y(
            float _position_y);

    /*!
     * @brief This function returns the value of member position_y
     * @return Value of member position_y
     */
    eProsima_user_DllExport float position_y() const;

    /*!
     * @brief This function returns a reference to member position_y
     * @return Reference to member position_y
     */
    eProsima_user_DllExport float& position_y();

    /*!
     * @brief This function sets a value in member position_z
     * @param _position_z New value for member position_z
     */
    eProsima_user_DllExport void position_z(
            float _position_z);

    /*!
     * @brief This function returns the value of member position_z
     * @return Value of member position_z
     */
    eProsima_user_DllExport float position_z() const;

    /*!
     * @brief This function returns a reference to member position_z
     * @return Reference to member position_z
     */
    eProsima_user_DllExport float& position_z();

    /*!
     * @brief This function sets a value in member orientation_x
     * @param _orientation_x New value for member orientation_x
     */
    eProsima_user_DllExport void orientation_x(
            float _orientation_x);

    /*!
     * @brief This function returns the value of member orientation_x
     * @return Value of member orientation_x
     */
    eProsima_user_DllExport float orientation_x() const;

    /*!
     * @brief This function returns a reference to member orientation_x
     * @return Reference to member orientation_x
     */
    eProsima_user_DllExport float& orientation_x();

    /*!
     * @brief This function sets a value in member orientation_y
     * @param _orientation_y New value for member orientation_y
     */
    eProsima_user_DllExport void orientation_y(
            float _orientation_y);

    /*!
     * @brief This function returns the value of member orientation_y
     * @return Value of member orientation_y
     */
    eProsima_user_DllExport float orientation_y() const;

    /*!
     * @brief This function returns a reference to member orientation_y
     * @return Reference to member orientation_y
     */
    eProsima_user_DllExport float& orientation_y();

    /*!
     * @brief This function sets a value in member orientation_z
     * @param _orientation_z New value for member orientation_z
     */
    eProsima_user_DllExport void orientation_z(
            float _orientation_z);

    /*!
     * @brief This function returns the value of member orientation_z
     * @return Value of member orientation_z
     */
    eProsima_user_DllExport float orientation_z() const;

    /*!
     * @brief This function returns a reference to member orientation_z
     * @return Reference to member orientation_z
     */
    eProsima_user_DllExport float& orientation_z();

    /*!
     * @brief This function sets a value in member orientation_w
     * @param _orientation_w New value for member orientation_w
     */
    eProsima_user_DllExport void orientation_w(
            float _orientation_w);

    /*!
     * @brief This function returns the value of member orientation_w
     * @return Value of member orientation_w
     */
    eProsima_user_DllExport float orientation_w() const;

    /*!
     * @brief This function returns a reference to member orientation_w
     * @return Reference to member orientation_w
     */
    eProsima_user_DllExport float& orientation_w();

    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<int8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<int8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<int8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<int8_t>& data();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const OccupancyGrid_map& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    float m_resolution;
    uint32_t m_width;
    uint32_t m_height;
    float m_position_x;
    float m_position_y;
    float m_position_z;
    float m_orientation_x;
    float m_orientation_y;
    float m_orientation_z;
    float m_orientation_w;
    std::vector<int8_t> m_data;

};

#endif // _FAST_DDS_GENERATED_OCCUPANCYGRID_MAP_H_